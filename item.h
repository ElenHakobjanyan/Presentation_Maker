#ifndef ITEM_H
#define ITEM_H

#include <string>
#include <vector>



class IAction
{
	//do

	//undo/redo stacks
};


using ColorType = std::string;


class IPosition // aka placeholder?
{
	// positioning can be either in cm/inch or in percentages of slide
public:
	size_t x; // Horizontal position
	size_t y; // Vertical position
	size_t h; // Height
	size_t w; // Width
};

class IBorderLine
{
public:
	std::string type;  // none, solid -- type might be enum
	ColorType color; // color code
	size_t width;
};

class ITextBox
{
public:
	bool bold;
	bool italic;
	bool underline;

	ColorType color;
	ColorType highlight;
	std::string font;
	size_t size;
};

class IObject : public IPosition, public IBorderLine // , public ITextBox
{
public:

private:
	std::string name; // autogenerated
	ColorType background;
	// grouped with ..
};

class Shape : public IObject
{

};

/*
objects types
	textbox
	shape
		line
		ellipse
		rectangle
		triangle
	table -- rows, cols, clr -- cells are textboxes ?
	media
		image
		video
		music
	chart
	freehand -- drawing, save as photo with transparent background maybe ?
*/

class Slide
{
	// Method chaining
public:
	// link?, rotate, sizing/cropping, flipH, flipV, 
	Slide& addImage(); // path string, x, y
	// type -- audio, video, link?
	Slide& addMedia();
	// align?, fill, flipH, flipV, shapeName, rotate, borderLine
	// borderLineProps -- color, width
	// shapes with or without text
	Slide& addShape();
	Slide& addTextBox();

	Slide& addChart();
	Slide& addTable();
private:
	ColorType background;
	// std::string title;			// template or empty slide
	size_t margins[4];				// top right bottom left
	std::vector<IObject*> objects;	// whichever is with smaller idx would be in front of those, which are after it, like layers
	size_t slideNumber;
	std::string notes;
	// header / footer 
};

class Presentation
{
public:
	void addSlides(Slide* slide, size_t position, size_t count = 0);
	void removeSlides(size_t position, size_t count = 1);
	void moveSlides(size_t positionFrom, size_t positionTo, size_t count = 1);

	size_t getCount();

	// setters getters

	// traverse -- slideshow(from first or curr slide till end or exit)
	void slideShow(); // outputs all slides' content + properties
private:
	std::vector<Slide*> slides;

	std::string author;
	std::string company;
	std::string title;
	std::string subject;

	size_t revisions; // revision number
	size_t ratio[2];  // (16:9 default, 4:3, custom ? )
	// current slide
};




#endif // ITEM_H
